/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LockedTokensClaimed = ContractEventLog<{
  _userAddress: string;
  _tokenAddress: string;
  _lockedAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RefundClaimed = ContractEventLog<{
  _userAddress: string;
  _tokenAddress: string;
  _refundAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type RefundSet = ContractEventLog<{
  _userAddress: string;
  _tokenAddress: string;
  _refundAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokenAdded = ContractEventLog<{
  _tokenAddress: string;
  0: string;
}>;
export type TokenRemoved = ContractEventLog<{
  _tokenAddress: string;
  0: string;
}>;
export type TokensDeposited = ContractEventLog<{
  _userAddress: string;
  _odinAddress: string;
  _depositAmount: string;
  _tokenAddress: string;
  _symbol: string;
  _tokenPrecision: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type TokensLocked = ContractEventLog<{
  _userAddress: string;
  _odinAddress: string;
  _depositAmount: string;
  _tokenAddress: string;
  _symbol: string;
  _tokenPrecision: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface BridgeAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BridgeAbi;
  clone(): BridgeAbi;
  methods: {
    addToken(_tokenAddress: string): NonPayableTransactionObject<boolean>;

    claimContractTokens(
      _claimableAmount: number | string | BN,
      _tokenAddress: string
    ): NonPayableTransactionObject<boolean>;

    claimLockedTokens(
      _tokenAddress: string
    ): NonPayableTransactionObject<boolean>;

    claimRefund(_tokenAddress: string): PayableTransactionObject<boolean>;

    claimingLockedFundsAllowed(): NonPayableTransactionObject<boolean>;

    deposit(
      _odinAddress: string,
      _tokenAddress: string,
      _depositAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    depositingAllowed(): NonPayableTransactionObject<boolean>;

    lockedTokens(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    lockingFundsAllowed(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    refund(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<{
      fee: string;
      amount: string;
      0: string;
      1: string;
    }>;

    removeToken(_tokenAddress: string): NonPayableTransactionObject<boolean>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAllowanceToClaimLockedFunds(
      _allowed: boolean
    ): NonPayableTransactionObject<boolean>;

    setAllowanceToDeposit(
      _allowed: boolean
    ): NonPayableTransactionObject<boolean>;

    setAllowanceToLock(_allowed: boolean): NonPayableTransactionObject<boolean>;

    setRefund(
      _userAddress: string,
      _tokenAddress: string,
      _refundAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    setRefundGas(
      _gas: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    supportedTokens(arg0: string): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    LockedTokensClaimed(cb?: Callback<LockedTokensClaimed>): EventEmitter;
    LockedTokensClaimed(
      options?: EventOptions,
      cb?: Callback<LockedTokensClaimed>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RefundClaimed(cb?: Callback<RefundClaimed>): EventEmitter;
    RefundClaimed(
      options?: EventOptions,
      cb?: Callback<RefundClaimed>
    ): EventEmitter;

    RefundSet(cb?: Callback<RefundSet>): EventEmitter;
    RefundSet(options?: EventOptions, cb?: Callback<RefundSet>): EventEmitter;

    TokenAdded(cb?: Callback<TokenAdded>): EventEmitter;
    TokenAdded(options?: EventOptions, cb?: Callback<TokenAdded>): EventEmitter;

    TokenRemoved(cb?: Callback<TokenRemoved>): EventEmitter;
    TokenRemoved(
      options?: EventOptions,
      cb?: Callback<TokenRemoved>
    ): EventEmitter;

    TokensDeposited(cb?: Callback<TokensDeposited>): EventEmitter;
    TokensDeposited(
      options?: EventOptions,
      cb?: Callback<TokensDeposited>
    ): EventEmitter;

    TokensLocked(cb?: Callback<TokensLocked>): EventEmitter;
    TokensLocked(
      options?: EventOptions,
      cb?: Callback<TokensLocked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LockedTokensClaimed", cb: Callback<LockedTokensClaimed>): void;
  once(
    event: "LockedTokensClaimed",
    options: EventOptions,
    cb: Callback<LockedTokensClaimed>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RefundClaimed", cb: Callback<RefundClaimed>): void;
  once(
    event: "RefundClaimed",
    options: EventOptions,
    cb: Callback<RefundClaimed>
  ): void;

  once(event: "RefundSet", cb: Callback<RefundSet>): void;
  once(
    event: "RefundSet",
    options: EventOptions,
    cb: Callback<RefundSet>
  ): void;

  once(event: "TokenAdded", cb: Callback<TokenAdded>): void;
  once(
    event: "TokenAdded",
    options: EventOptions,
    cb: Callback<TokenAdded>
  ): void;

  once(event: "TokenRemoved", cb: Callback<TokenRemoved>): void;
  once(
    event: "TokenRemoved",
    options: EventOptions,
    cb: Callback<TokenRemoved>
  ): void;

  once(event: "TokensDeposited", cb: Callback<TokensDeposited>): void;
  once(
    event: "TokensDeposited",
    options: EventOptions,
    cb: Callback<TokensDeposited>
  ): void;

  once(event: "TokensLocked", cb: Callback<TokensLocked>): void;
  once(
    event: "TokensLocked",
    options: EventOptions,
    cb: Callback<TokensLocked>
  ): void;
}
